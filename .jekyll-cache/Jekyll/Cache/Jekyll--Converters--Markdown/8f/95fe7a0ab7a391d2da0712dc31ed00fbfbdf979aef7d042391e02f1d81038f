I"	<h2 id="instructions">Instructions</h2>

<p>In the game of Lucky Sevens, the player rolls a pair of dice. If the dots add up to 7, the player wins $4; otherwise, the player loses $1.</p>

<p>Suppose that, to entice the gullible, a casino tells players that there are lots of ways to win: (1, 6), (2, 5), and so on. A little mathematical analysis reveals that there are not enough ways to win to make the game worthwhile; however, because many peopleâ€™s eyes glaze over at the first mention of mathematics, your challenge is to write a program that demonstrates the futility of playing the game.</p>

<p>Your program should take as input the amount of money that the player wants to put into the pot, and using a random number generator play the game until the pot is empty. At that point, the program should print:</p>

<ol>
  <li>The number of rolls it took to break the player</li>
  <li>The maximum amount of money in the pot.</li>
</ol>

<p>An example of the program input and output is shown below:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>How many dollars do you have? 50

You are broke after 220 rolls.
You should have quit after 6 rolls when you had $59.
</code></pre></div></div>

<blockquote>
  <h2 id="this-program-implements-logic-to-create-semi-random-results-the-example-above-is-one-in-many-possible-scenarios">This program implements logic to create semi-random results. The example above is one in many possible scenarios.</h2>
</blockquote>

<h3 id="flowchart">Flowchart</h3>

<p><img src="../../images/cti110_p_3.11_sevens.flowchart.svg" alt="sevens flowchart" /></p>

<hr />

<h3 id="starter-code">Starter Code</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="s">"""
Program: sevens.py
Project 3.11

Simulate the game of lucky sevens until all funds are depleted.

1) Rules:
       roll two dice
       if the sum equals 7, win $4, else lose $1
2) The input is:
       the amount of money the user is prepared to lose 
3) Computations:
       use a random number generator to simulate rolling the dice
       loop until the funds are depleted 
       count the number of rolls
       keep track of the maximum amount
4) The outputs are:
       the number of rolls it takes to deplete the funds
       the maximum amount 

"""</span>
<span class="c1"># import module 
</span>
<span class="c1"># Request the input
</span>
<span class="c1"># Initialize variables
</span>
<span class="c1"># Loop until the money is gone
</span>
    <span class="c1"># Roll the dice
</span>
    <span class="c1">#Calculate the winnings or losses
</span>
    <span class="c1">#If this is a new maximum, remember it
</span>

<span class="c1"># Display the results
</span></code></pre></div></div>

:ET